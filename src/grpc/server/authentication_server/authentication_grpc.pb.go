// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authentication_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationClient is the client API for Authentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationClient interface {
	Login(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *Tokens, opts ...grpc.CallOption) (*BooleanResponse, error)
	ValidateToken(ctx context.Context, in *Tokens, opts ...grpc.CallOption) (*AccessToken, error)
	ResendEmail(ctx context.Context, in *ResendEmailRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	GenerateSecret(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*ScanTotp, error)
	ValidateTemporaryToken(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*AccessToken, error)
	ValidateTotp(ctx context.Context, in *TotpValidation, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationClient(cc grpc.ClientConnInterface) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) Login(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/Authentication/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) Logout(ctx context.Context, in *Tokens, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/Authentication/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ValidateToken(ctx context.Context, in *Tokens, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := c.cc.Invoke(ctx, "/Authentication/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ResendEmail(ctx context.Context, in *ResendEmailRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/Authentication/ResendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) GenerateSecret(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*ScanTotp, error) {
	out := new(ScanTotp)
	err := c.cc.Invoke(ctx, "/Authentication/GenerateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ValidateTemporaryToken(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := c.cc.Invoke(ctx, "/Authentication/ValidateTemporaryToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ValidateTotp(ctx context.Context, in *TotpValidation, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/Authentication/ValidateTotp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServer is the server API for Authentication service.
// All implementations must embed UnimplementedAuthenticationServer
// for forward compatibility
type AuthenticationServer interface {
	Login(context.Context, *LoginCredentials) (*LoginResponse, error)
	Logout(context.Context, *Tokens) (*BooleanResponse, error)
	ValidateToken(context.Context, *Tokens) (*AccessToken, error)
	ResendEmail(context.Context, *ResendEmailRequest) (*BooleanResponse, error)
	GenerateSecret(context.Context, *AccessToken) (*ScanTotp, error)
	ValidateTemporaryToken(context.Context, *AccessToken) (*AccessToken, error)
	ValidateTotp(context.Context, *TotpValidation) (*LoginResponse, error)
	mustEmbedUnimplementedAuthenticationServer()
}

// UnimplementedAuthenticationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServer struct {
}

func (UnimplementedAuthenticationServer) Login(context.Context, *LoginCredentials) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthenticationServer) Logout(context.Context, *Tokens) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthenticationServer) ValidateToken(context.Context, *Tokens) (*AccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAuthenticationServer) ResendEmail(context.Context, *ResendEmailRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendEmail not implemented")
}
func (UnimplementedAuthenticationServer) GenerateSecret(context.Context, *AccessToken) (*ScanTotp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSecret not implemented")
}
func (UnimplementedAuthenticationServer) ValidateTemporaryToken(context.Context, *AccessToken) (*AccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTemporaryToken not implemented")
}
func (UnimplementedAuthenticationServer) ValidateTotp(context.Context, *TotpValidation) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTotp not implemented")
}
func (UnimplementedAuthenticationServer) mustEmbedUnimplementedAuthenticationServer() {}

// UnsafeAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServer will
// result in compilation errors.
type UnsafeAuthenticationServer interface {
	mustEmbedUnimplementedAuthenticationServer()
}

func RegisterAuthenticationServer(s grpc.ServiceRegistrar, srv AuthenticationServer) {
	s.RegisterService(&Authentication_ServiceDesc, srv)
}

func _Authentication_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).Login(ctx, req.(*LoginCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).Logout(ctx, req.(*Tokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ValidateToken(ctx, req.(*Tokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ResendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ResendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/ResendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ResendEmail(ctx, req.(*ResendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_GenerateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).GenerateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/GenerateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).GenerateSecret(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ValidateTemporaryToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ValidateTemporaryToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/ValidateTemporaryToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ValidateTemporaryToken(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ValidateTotp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotpValidation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ValidateTotp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/ValidateTotp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ValidateTotp(ctx, req.(*TotpValidation))
	}
	return interceptor(ctx, in, info, handler)
}

// Authentication_ServiceDesc is the grpc.ServiceDesc for Authentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Authentication_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Authentication_Logout_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Authentication_ValidateToken_Handler,
		},
		{
			MethodName: "ResendEmail",
			Handler:    _Authentication_ResendEmail_Handler,
		},
		{
			MethodName: "GenerateSecret",
			Handler:    _Authentication_GenerateSecret_Handler,
		},
		{
			MethodName: "ValidateTemporaryToken",
			Handler:    _Authentication_ValidateTemporaryToken_Handler,
		},
		{
			MethodName: "ValidateTotp",
			Handler:    _Authentication_ValidateTotp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication.proto",
}

// TotpClient is the client API for Totp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TotpClient interface {
	Verify(ctx context.Context, in *TotpSecret, opts ...grpc.CallOption) (*BoolWrapper, error)
	IsEnabled(ctx context.Context, in *Username, opts ...grpc.CallOption) (*BoolWrapper, error)
	Disable(ctx context.Context, in *TotpSecret, opts ...grpc.CallOption) (*BoolWrapper, error)
}

type totpClient struct {
	cc grpc.ClientConnInterface
}

func NewTotpClient(cc grpc.ClientConnInterface) TotpClient {
	return &totpClient{cc}
}

func (c *totpClient) Verify(ctx context.Context, in *TotpSecret, opts ...grpc.CallOption) (*BoolWrapper, error) {
	out := new(BoolWrapper)
	err := c.cc.Invoke(ctx, "/Totp/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *totpClient) IsEnabled(ctx context.Context, in *Username, opts ...grpc.CallOption) (*BoolWrapper, error) {
	out := new(BoolWrapper)
	err := c.cc.Invoke(ctx, "/Totp/IsEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *totpClient) Disable(ctx context.Context, in *TotpSecret, opts ...grpc.CallOption) (*BoolWrapper, error) {
	out := new(BoolWrapper)
	err := c.cc.Invoke(ctx, "/Totp/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TotpServer is the server API for Totp service.
// All implementations must embed UnimplementedTotpServer
// for forward compatibility
type TotpServer interface {
	Verify(context.Context, *TotpSecret) (*BoolWrapper, error)
	IsEnabled(context.Context, *Username) (*BoolWrapper, error)
	Disable(context.Context, *TotpSecret) (*BoolWrapper, error)
	mustEmbedUnimplementedTotpServer()
}

// UnimplementedTotpServer must be embedded to have forward compatible implementations.
type UnimplementedTotpServer struct {
}

func (UnimplementedTotpServer) Verify(context.Context, *TotpSecret) (*BoolWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedTotpServer) IsEnabled(context.Context, *Username) (*BoolWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEnabled not implemented")
}
func (UnimplementedTotpServer) Disable(context.Context, *TotpSecret) (*BoolWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedTotpServer) mustEmbedUnimplementedTotpServer() {}

// UnsafeTotpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TotpServer will
// result in compilation errors.
type UnsafeTotpServer interface {
	mustEmbedUnimplementedTotpServer()
}

func RegisterTotpServer(s grpc.ServiceRegistrar, srv TotpServer) {
	s.RegisterService(&Totp_ServiceDesc, srv)
}

func _Totp_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotpSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TotpServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Totp/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TotpServer).Verify(ctx, req.(*TotpSecret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Totp_IsEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TotpServer).IsEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Totp/IsEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TotpServer).IsEnabled(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _Totp_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotpSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TotpServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Totp/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TotpServer).Disable(ctx, req.(*TotpSecret))
	}
	return interceptor(ctx, in, info, handler)
}

// Totp_ServiceDesc is the grpc.ServiceDesc for Totp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Totp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Totp",
	HandlerType: (*TotpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _Totp_Verify_Handler,
		},
		{
			MethodName: "IsEnabled",
			Handler:    _Totp_IsEnabled_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _Totp_Disable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication.proto",
}
